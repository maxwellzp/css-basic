HTML - HyperText Markup Language

Разметка состоит из набора тегов и их атрибутов.

Виды HTML тегов:
- одинарные: <название тега>
- парные: <название тега>...</название тега>

Атрибут - дополнительный параметр для тега
Пример: <тег атрибут="...">...</тег>

HTML основные теги
- Блочные - занимают всю ширину и начинаются с новой строки
- Строчные - занимают только то пространство, которое им необходимо и находятся на 
одной строке, пока не закончится пространство.

CSS - Cascading Style Sheets - каскадные таблицы стилей

CSS файл состоит из набора селекторов, свойств и значений к ним 

class - глобальный атрибут, можно использовать для стилизации
многих элементов

id - глобальный атрибут, уникальный идентификатор элемента

Силизация нескольких элементов:
h1, h2, h3 {}
.title, .sub-title {}

Стилизация дочерних элементов:
.text p {}
.text b {}

Если вложенность не нужна, не используем ее !

Дочерние элементы наследуют некоторые стили родительских элементов,
если такие стили не были заданы.

div - блочный элемент
span - строчный элемент 

display: block; - превратить строчный элемент в блочный

margin, высота и ширина для строчных элементов сверху и снизу не работает.

display: inline-block; - сделать строчный элемент гибридом, элемент останется в потоке, при этом будут работать все маржины.

выровнять блок по центру можно при помощи:
margin: 10px auto;
или
margin-left: auto;
margin-right: auto;

Как назвать правильно класс ? 
- Нужно задать вопрос что это за блок
- Или что делает данный класс

Хороший пример:
<div class="article">
    <h1 class="article-title">Title</h1>
    <div class="article-text">Some text</div>
</div>

outline - обводка элемента без влияния на размер элемента

////////////////////////////////Позиционирование/////////////////////////////////////////
Если мы хотим переместить элемент. Тогда задаем position: absolute
И мы можем управлять элементом при помощи свойств: top, right, bottom, left.
Свойства выше работают только если задан position: absolute.
Позиционирование используется для сложных элементов.
Например: модальное окно

Относительное позиционирование.
Если нужно позиционировать элемент относительно другого элемента.
Один элемент должен иметь position: absolute, а другой position: relative.
Элемент с position: absolute ищет ближайший элемент с position: relative. 
Если такой элемент не находится, то элемент позиционируется относительно body элемента.
Можно использовать отрицательные значения для свойств: top, right, bottom, left. 

Благодаря свойству position: absolute, элемент выбивается из обычного потока.

Элемент с position: relative. Остается в потоке и ведет себя как обычно.

position: static по умолчанию. Нет позицинирования. 

position: fixed - позиционируется относительно окна просмотра. Т.е. если есть скрол то 
при скроле элементы двигаются, а фиксированый элемент остается на месте. На него не влияет
никакой position: relative. Лучше чтобы такие элементы, были прямыми потомками элемента
body.






Псевдоэлементы используются для декоративных вещей. Вставить иконку ...

Семантические теги HTML5:
- header
- main
- footer
- nav
- section (если есть заголовок. В секции должен быть заголовок)
- article (если есть заголовок. В article должен быть заголовок)
- time
- aside
- figure/figcaption
Семантические теги раньше HTML5:
- address


box-sizing - меняет алгоритм подсчета размера блока
- box-sizing: border-box; (Самый удобный алгоритм подсчета) Какие размеры установили, такие размеры и будут. Падинги и границы будут идти внутрь и не будут влиять на размеры. Места для содержимого будет меньше.
- box-sizing: content-box; Значение по умолчанию. 

CSS файл читается сверху вниз. Селекторы ниже приоритетней.

Приоритетность селекторов:
1) селектор по id 
2) селектор по классу
-
Весь селектора со сложеностью будет больше чем просто селектор по классу.
Лучше всегда работать через класс.

!important - позволяет задать самый высокий приоритет.

/////////////////////////Единицы измерения///////////////////////////////////
- px (пиксели)
- em (относительная единица измерения, которая зависит от шрифта)
допусти в бади мы имеем font-size: 15px, поэтому 1em будет равнятся 15 пикселам.
- rem (относительная единица измерения )

Как скрыть элемент на странице:
- opacity: 0; Элемент полностью прозрачный, но физически он остается и занимает пространство.
- display: none; Элемент полностью пропадает из сайта. Как будто его никогда и не было. 
Но такой элемент продолжает находится в DOM дереве.
- visibility: hidden; Скрывает элемент, но место под него остается. 


Хорошая практика скачать шрифты на сервер, чтобы улучшить скорость загрузки шрифтов.

// ADAPTIVE
max-width: 800px;
максимальная ширина данного элемента 800 пикселов. Если размер экрана будет меньше 
чем 800 пикселов, тогда данный элемент будет адаптироваться под данный размер.
лучше всего писать так:
- width: 100%;
- max-width: 800px;
блок будет занимать 100% ширины окна, но блок будет максимум 800 пикселов.

Media запросы нужно писать в самом низу.
Медиа запросы должны идти от больших экранов к меньшим. Сверху вниз. 
